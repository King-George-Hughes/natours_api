1st Start
//////////////////////////////////////
const fs = require('fs');
const express = require('express');

const app = express();

app.use(express.json());

// app.get('/', (req, res) => {
//   //   res.status(200).send('Hello from the server side!');
//   res
//     .status(200)
//     .json({ message: 'Hello from the server side!', app: 'Natours' });
// });

// app.post('/', (req, res) => {
//   res.status(200).send('You can post to this endpoint...');
// });

const tours = JSON.parse(
  fs.readFileSync(`${__dirname}/dev-data/data/tours-simple.json`, 'utf-8')
);

// console.log(JSON.parse(tours));

// Get All Tours
app.get('/api/v1/tours', (req, res) => {
  res
    .status(200)
    .json({ status: 'success', result: tours.length, data: { tours: tours } });
});

// Get Single Tour
app.get('/api/v1/tours/:id', (req, res) => {
  console.log(req.params);

  const id = +req.params.id;
  const tour = tours.find((singleTour) => singleTour.id === id);

  if (!tour) {
    res.status(404).json({
      ststus: 'failed',
      message: 'Invalid argument',
    });
  }

  res.status(200).json({
    status: 'success',
    data: {
      tour: tour,
    },
  });
});

// Create Tour
app.post('/api/v1/tours', (req, res) => {
  //   console.log(req.body);
  const newId = tours[tours.length - 1].id + 1;
  const newTour = Object.assign({ id: newId }, req.body);

  tours.push(newTour);

  fs.writeFile(
    `${__dirname}/dev-data/data/tours-simple.json`,
    JSON.stringify(tours),
    (err) => {
      if (err) throw err;

      res.status(201).json({
        status: 'success',
        data: {
          tour: newTour,
        },
      });
    }
  );
});

// Update Tour
app.patch('/api/v1/tours/:id', (req, res) => {
  if (+req.params.id > tours.length) {
    res.status(404).json({
      status: 'failed',
      message: 'invalid argument',
    });
  }

  res.status(200).json({
    status: 'success',
    data: {
      tour: '<h1>Tour Updated Successfully</h1>',
    },
  });
});

// Delete Tour
app.delete('/api/v1/tours/:id', (req, res) => {
  if (+req.params.id > tours.length) {
    res.status(404).json({
      status: 'failed',
      message: 'invalid argument',
    });
  }

  res.status(204).json({
    status: 'success',
    data: null,
  });
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`App running on port ${PORT}`);
});
